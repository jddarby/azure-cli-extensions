{
    "fed-crds": {
      "global": { "monitoring": { "prometheus": { "enabled": true } } },
      "pod-rook_ceph-crd": { "rook": { "crd": true } },
      "pod-metallb-crd": {
        "metallb": {
          "crd": true,
          "namespace": "fed-metallb"
        }
      },
      "pod-prometheus-crd": { "prometheus": { "crd": true } },
      "pod-cdpln-crd": {
        "cni": { "crd": true },
        "enabled": true
      },
      "pod-nginx-crd": { "nginx": { "crd": true } },
      "pod-istio-crd": { "istio": { "crd": true } },
      "pod-timer-crd": { "timer": { "crd": true } },
      "pod-mongo_cfg_op-crd": { "mongo_cfg_op": { "crd": true } },
      "pod-sctp_lb_agent-crd": { "sctp_lb_agent": { "crd": true } },
      "pod-cert_manager-crd": { "cert_manager": { "crd": true } },
      "pod-elastalert_cfg-crd": { "elastalert_cfg": { "crd": true } },
      "pod-istio_config-crd": { "istio_config": { "crd": true } },
      "pod-redis_operator-crd": { "redis_operator": { "crd": true } },
      "pod-etcd_operator-crd": { "etcd_operator": { "crd": true } },
      "pod-grafana_operator-crd": { "grafana_operator": { "crd": true } },
      "pod-paas_monitor-crd": { "paas_monitor": { "crd": true } },
      "pod-capture_mgr-crd": { "capture_mgr": { "crd": true } },
      "pod-zookeeper-crd": { "zookeeper": { "crd": true } },
      "pod-kafka-crd": { "kafka": { "crd": true } },
      "pod-kubedb_operator-crd": { "kubedb_operator": { "crd": true } },
      "pod-vault_cfg_mgr-crd": { "hashicorp_vault": { "crd": false } },
      "pod-ext_secret_oper-crd": { "ext_secret_oper": { "crd": false } },
      "pod-csi_driver-crd": { "csi_driver": { "crd": false } },
      "pod-opm_ambassador-crd": { "opm_ambassador": { "crd": true } },
      "pod-opa_gatekeeper-crd": { "opa_gatekeeper": { "crd": false } }
    },
    "fed-rbac": {
      "global": {
        "overrides": {
          "postInstallEnabled": false,
          "preInstallEnabled": false,
          "postDeleteEnabled": false,
          "preCleanupEnabled": false
        },
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-full-cr",
        "enableSCC": false
      },
      "pod-rbac": {
        "enabled": true,
        "podExec": true,
        "podprio": { "enabled": true }
      },
      "azuread": {
        "enabled": false,
        "limaintaadGroupObjectid": "limaintaadGroupObjectid",
        "maintaadGroupObjectid": "maintaadGroupObjectid"
      },
      "azurearc": {
        "enabled": false,
        "clusterrole": "restricted-cr",
        "aadproxysa": "azure-arc-kube-aad-proxy-sa",
        "namespace": "azure-arc"
      }
    },
    "fed-kube-addons": {
      "pod-descheduler": {
        "enabled": true,
        "logVerbosity": "3",
        "nodeSelector": [],
        "evictFailedBarePods": true,
        "evictLocalStoragePods": false,
        "evictSystemCriticalPods": false,
        "maxNoOfPodsToEvictPerNode": 100,
        "policy": {
          "removeDuplicates": {
            "enabled": true,
            "namespacesIncluded": [
              "fed-db-mongo-ram",
              "fed-db-etcd",
              "fed-service-reg"
            ],
            "nodefit": true,
            "thresholdPriorityClassName": ""
          },
          "removePodsViolatingInterPodAntiAffinity": {
            "enabled": true,
            "namespacesIncluded": [
              "fed-db-mongo-ram",
              "fed-db-etcd",
              "fed-service-reg"
            ],
            "nodefit": true,
            "thresholdPriorityClassName": ""
          },
          "removePodsViolatingNodeAffinity": {
            "enabled": true,
            "nodeAffinityType": [ "requiredDuringSchedulingIgnoredDuringExecution" ],
            "namespacesIncluded": [
              "fed-db-mongo-ram",
              "fed-db-etcd",
              "fed-service-reg",
              "vnfmgr"
            ],
            "nodefit": true,
            "thresholdPriorityClassName": ""
          },
          "removePodsViolatingTopologySpreadConstraint": {
            "enabled": true,
            "includeSoftConstraints": true,
            "namespacesIncluded": [
              "fed-db-mongo-ram",
              "fed-db-etcd",
              "fed-service-reg",
              "vnfmgr"
            ],
            "nodefit": true,
            "thresholdPriorityClassName": ""
          },
          "removePodsHavingTooManyRestarts": {
            "enabled": true,
            "includingInitContainers": false,
            "podRestartThreshold": 20,
            "namespacesIncluded": [
              "fed-db-mongo-ram",
              "fed-db-etcd",
              "fed-service-reg",
              "vnfmgr"
            ],
            "nodefit": true,
            "thresholdPriorityClassName": ""
          }
        }
      },
      "pod-conntrack_clean": {
        "enabled": true,
        "udpCleaningEnabled": true,
        "tcpCleaningEnabled": false
      },
      "pod-node_config": {
        "commissioning": { "enabled": false },
        "dpdkNodeConfigMap": {
          "enabled": false,
          "config": [
            {
              "type": "hugepages",
              "size": "2M",
              "nbPages": 2000
            },
            {
              "type": "commands",
              "cmds": [
                {
                  "conditional": "which driverctl",
                  "cmd": "echo 'No driverctl installed'",
                  "isPermanent": "false"
                },
                {
                  "conditional": "lsmod | grep uio_hv_generic",
                  "cmd": "echo 'No uio_hv_generic loaded'",
                  "isPermanent": "false"
                }
              ]
            },
            {
              "type": "portsRename",
              "ports": [ { "name": "eth1" } ]
            }
          ]
        },
        "aodsNodeConfigWorker": {
          "config": [
            {
              "type": "nodeStatusUpdateFrequency",
              "value": "5s"
            },
            {
              "type": "defaultLimitNOFILE",
              "value": "65535:524288"
            },
            {
              "type": "defaultTasksMax",
              "value": 359414
            },
            {
              "type": "txqueuelen",
              "value": 20000,
              "ethname": "ens3"
            },
            {
              "type": "allowedUnsafeSysctls",
              "allowedUnsafeSysctls": [
                "net.core.somaxconn",
                "net.ipv4.tcp_max_syn_backlog",
                "net.ipv4.tcp_fin_timeout",
                "net.ipv4.tcp_keepalive_intvl",
                "net.ipv4.tcp_keepalive_time",
                "net.ipv4.conf.all.route_localnet"
              ]
            },
            {
              "type": "nodeLabel",
              "value": "node.kubernetes.io/nodetype=worker"
            },
            {
              "type": "cgroup",
              "value": "cgroup"
            }
          ]
        },
        "aodsNodeConfigMaster": {
          "config": [
            {
              "type": "nodeStatusUpdateFrequency",
              "value": "5s"
            },
            {
              "type": "nodeMonitorGracePeriod",
              "value": "20s"
            },
            {
              "type": "defaultNotReadyTolerationSeconds",
              "value": "170"
            },
            {
              "type": "defaultUnreachableTolerationSeconds",
              "value": "170"
            },
            {
              "type": "defaultLimitNOFILE",
              "value": "65535:524288"
            },
            {
              "type": "defaultTasksMax",
              "value": 101382
            },
            {
              "type": "txqueuelen",
              "value": 20000,
              "ethname": "ens3"
            },
            {
              "type": "allowedUnsafeSysctls",
              "allowedUnsafeSysctls": [
                "net.core.somaxconn",
                "net.ipv4.tcp_max_syn_backlog",
                "net.ipv4.tcp_fin_timeout",
                "net.ipv4.tcp_keepalive_intvl",
                "net.ipv4.tcp_keepalive_time",
                "net.ipv4.conf.all.route_localnet"
              ]
            },
            {
              "type": "nodeLabel",
              "value": "node.kubernetes.io/nodetype=master"
            },
            {
              "type": "cgroup",
              "value": "cgroup"
            }
          ]
        },
        "rbacEnabled": true,
        "clusterRole": "permissive-full-cr",
        "serviceAccountName": "node-config-serviceaccount"
      }
    },
    "fed-opa": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-full-cr",
        "defaultServiceAccountName": "fed-opa-serviceaccount",
        "podPriorityEnabled": true,
        "deployPolicies": false,
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ]
        },
        "overrides": { "postUpgradeEnabled": true },
        "deployment": { "nodeDataplaneAffinity": "false" },
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.opa-unique-name}"
        }
      },
      "pod-opa": {
        "replicas": 3,
        "readinessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 60,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        },
        "livenessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 60,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        },
        "tolerations": {
          "enabled": true,
          "tolerationSecondsUnreachable": 0,
          "tolerationsSecondsNotReady": 0
        },
        "podPriority": {
          "enabled": true,
          "priorityClassName": "uc-priority-1"
        },
        "podDisruptionBudget": { "enabled": true },
        "streamserver": {
          "url": "capture-stream-server-svc.fed-paas-helpers.svc.cluster.local:9890"
        }
      },
      "pod-opa_gatekeeper": {
        "deployOpaGatekeeper": false,
        "podPriority": {
          "enabled": true,
          "priorityClassName": "uc-priority-1"
        },
        "exemptedNamespaces": [ "kube-system", "fed-rbac" ]
      }
    },
    "fed-paas-helpers": {
      "global": {
        "vault": {
          "enabled": false,
          "hashicorpVault": {
            "enabled": false,
            "service": "http://fed-vault-svc-internal.fed-vault:8200"
          },
          "azureKeyVault": {
            "enabled": false,
            "tenantID": "",
            "keyVaultName": "",
            "aksCluster": false
          }
        },
        "adminPassword": "{deployParameters.admin-password}",
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-paas-helpers-serviceaccount",
        "podPriorityEnabled": true,
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-db-etcd",
            "fed-db-mongo-ram",
            "fed-istio",
            "fed-metallb",
            "fed-prometheus",
            "fed-amf-mme",
            "fed-smf",
            "fed-upf",
            "fed-nrf",
            "fed-nssf",
            "fed-n3iwf",
            "fed-agf"
          ]
        },
        "enableSCC": false,
        "enableUserProvidedSCC": false,
        "opaInjectDisabled": false,
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "128m",
              "retryWait": "10s",
              "maxRetries": 5
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ],
          "alerts": {
            "enabled": false,
            "host": "",
            "port": 3030,
            "realert": { "minutes": 1 },
            "receivers": [
              { "slack": { "webhookurl": "" } },
              { "post": { "http_post_url": "" } },
              {
                "email": {
                  "to_address": "",
                  "smtp_host": "",
                  "smtp_port": "",
                  "smtp_ssl": false,
                  "from_addr": ""
                }
              }
            ]
          }
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "fileserver": {
          "nfs": {
            "remoteHost": "{deployParameters.nfs-server}",
            "remotePath": "{deployParameters.nfs-filepath}",
            "remotePort": "85"
          }
        },
        "metricsScrapeInterval": "1m",
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.paas-helpers-unique-name}"
        },
        "loadBalancerSourceRanges": "",
        "overrides": { "postInstallEnabled": false },
        "deployment": { "nodeDataplaneAffinity": "false" },
        "kargo": { "enabled": true }
      },
      "name": "paas-monitor",
      "pod-grafana_operator": {
        "enabled": true,
        "deployment": { "authToProm": { "oAuth": { "enabled": false } } },
        "livenessProbe": {
          "initialDelaySeconds": 20,
          "periodSeconds": 30,
          "timeoutSeconds": 30,
          "successThreshold": 1,
          "failureThreshold": 10
        }
      },
      "pod-mongo_cfg_op": {
        "enabled": true,
        "rbacEnabled": true,
        "serviceAccountName": "mongo-cfg-op",
        "userProvidedSCCName": ""
      },
      "pod-trace_exporter": {
        "enabled": true,
        "resources": {
          "limits": {
            "cpu": "2",
            "memory": "4Gi"
          },
          "requests": {
            "cpu": "100m",
            "memory": "200Mi"
          }
        },
        "forwardServer": {
          "host": "",
          "port": ""
        },
        "cleaner": {
          "enabled": true,
          "retentionTime": "1h"
        },
        "rbacEnabled": true,
        "clusterRole": "permissive-full-cr",
        "serviceAccountName": "trace-exporter-serviceaccount",
        "elasticconfig": { "elasticurl": "" }
      },
      "pod-fluentd_operator": {
        "enabled": true,
        "name": "fluentd",
        "nameOverride": "operator",
        "logLevel": "warn",
        "fluentdLogLevel": "error",
        "prometheusEnabled": true,
        "syslogEnabled": false,
        "auditlogEnabled": false,
        "lilogsEnabled": false,
        "k8sEventLoggingEnabled": false,
        "fluentd": {
          "enabled": true,
          "multiWorkerEnabled": true,
          "numberOfWorkers": 10,
          "elastic": {
            "shards": 3,
            "replicas": 0
          },
          "resources": {
            "limits": {
              "cpu": "4",
              "memory": "6Gi"
            },
            "requests": {
              "cpu": "10m",
              "memory": "10Mi"
            }
          }
        },
        "livenessProbe": {
          "failureThreshold": 5,
          "initialDelaySeconds": 120,
          "periodSeconds": 60,
          "successThreshold": 1,
          "timeoutSeconds": 10
        },
        "rbacEnabled": true,
        "serviceAccountName": "fluentd-operator-serviceaccount"
      },
      "pod-k8s_event_logger": { "enabled": true },
      "pod-jaeger_agent": {
        "rbacEnabled": true,
        "serviceAccountName": "jaeger-agent-sa",
        "readinessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 10,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        },
        "livenessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 10,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        },
        "agent": {
          "enabled": true,
          "log": { "level": "info" },
          "collector": {
            "host": "{deployParameters.jaeger-agt-col-host}",
            "port": 14250
          },
          "resources": {
            "requests": {
              "cpu": "200m",
              "memory": "500Mi"
            }
          }
        }
      },
      "pod-cert_manager": {
        "enabled": true,
        "issuerTypes": {
          "ca": {
            "enabled": true,
            "issuerName": "affirmed-clusterissuer",
            "crlDistributionPoints": "",
            "userProvided": {
              "enabled": true,
              "rootCa": {
                "tlscrt": "{deployParameters.tlscrt}",
                "tlskey": "{deployParameters.tlskey}"
              }
            },
            "userProvidedVault": {
              "enabled": false,
              "rootCa": {
                "tlscrtSecretName": "",
                "tlskeySecretName": ""
              }
            }
          }
        },
        "rbacEnabled": true,
        "serviceAccount": {
          "create": true,
          "name": "cert-manager-sa"
        }
      },
      "pod-cert_ctrl": {
        "debug": { "enabled": false },
        "userProvidedCaBundle": {
          "enabled": false,
          "cacert": "-----BEGIN CERTIFICATE-----\nMIIEJTCCAw2gAwIBAgIJAO9TIRZ1sH4cMA0GCSqGSIb3DQEBCwUAMIGoMQswCQYD\nVQQGEwJVUzELMAkGA1UECAwCTUExDjAMBgNVBAcMBUFjdG9uMRowGAYDVQQKDBFB\nZmZpcm1lZCBOZXR3b3JrczEMMAoGA1UECwwDQ05JMR0wGwYDVQQDDBRhZmZpcm1l\nZG5ldHdvcmtzLmNvbTEzMDEGCSqGSIb3DQEJARYkbml0aXNoX21hbGhvdHJhQGFm\nZmlybWVkbmV0d29ya3MuY29tMB4XDTE5MDgxMzE4MDA1NFoXDTI5MDgxMDE4MDA1\nNFowgagxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNQTEOMAwGA1UEBwwFQWN0b24x\nGjAYBgNVBAoMEUFmZmlybWVkIE5ldHdvcmtzMQwwCgYDVQQLDANDTkkxHTAbBgNV\nBAMMFGFmZmlybWVkbmV0d29ya3MuY29tMTMwMQYJKoZIhvcNAQkBFiRuaXRpc2hf\nbWFsaG90cmFAYWZmaXJtZWRuZXR3b3Jrcy5jb20wggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQC0jPrr8XfUGpRepRsUQ77qIBxyq6OMU+SbydoHHdibXN/G\nK6QkS7iJkywLPuDwEFlvqPtChc3RQ2wj92loEvKuKTbx7aUyVXmneznij2S8Hc0M\nm++8p95KzIiSbol3cIUiGe7oEZ03FTi1nKgjT8AGbciUFst1V5Vw4U3bn7Wa1WQP\ntlGTmHDbQKXi3VG8mVAVomDvem0z+XskmGDHNWADadnmeiWnYdZyJfc2olxxigns\nnMuQ6G++yjUiTGn+4uSB6TGMfc9k+iggoI6igUTF2HPM9WKAbbPGEOx/SnLNg5HN\nfjLbo26k/MXNEsCnlgF5A7wTwCzZMigZfpYE2/aNAgMBAAGjUDBOMB0GA1UdDgQW\nBBSSXOItD3vsKQ2HMO0CKAsocaAlHDAfBgNVHSMEGDAWgBSSXOItD3vsKQ2HMO0C\nKAsocaAlHDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCh/t+n2c72\nS2qwzEn/0WtKdbDEOi0AAEiLqfshCPxlYgdGjqja9ZbQ/TR/EUZOoEVQWbr0d/Sz\nGtgqINequkyX82vVyRqoiHlqDtFKJwf3Z0qHPGmvh/zGDwctBu4GphbiJXEl83xh\nwdSUZKDn+/pP4sw6vxyqTU1+mBcDDgCoCaJSdLFo9AsJk/QRHjAPUiG25UKWCkML\njEbIYFOejSo+GOZ/edB+X8Ua8PsKmFI1rUUrpE/rH4QRbRJww4xiL0zlkSYMM+G2\n4xD38RH+6xl6kLC7R/1if8VNFGqgeGp6lgQg/hW3q9ncbwILLyvxoKKUK1Njr2co\nmbm/D0rrJJCd\n-----END CERTIFICATE-----"
        }
      },
      "pod-istio_config": {
        "rbacEnabled": true,
        "serviceAccountName": "istio-config-controller-sa"
      },
      "pod-capture_mgr": {
        "enabled": true,
        "rbacEnabled": true,
        "serviceAccountName": "capture-mgr-sa"
      },
      "pod-capture_ss": { "enabled": true },
      "pod-kargo": {
        "rbacEnabled": true,
        "clusterRole": "permissive-full-cr",
        "serviceAccountName": "kargo-serviceaccount",
        "service": {
          "port": 5555,
          "loadBalancerIP": "{deployParameters.kargo-lb-ip}",
          "loadBalancerFQDN": "",
          "loadBalancerSharingKey": "paas",
          "serviceAnnotations": {
            "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
            "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
          }
        },
        "logLevel": "info",
        "cleaner": {
          "enabled": true,
          "retentionSizeGB": 40,
          "retentionTime": "3h"
        },
        "resources": {
          "limits": {
            "cpu": "2",
            "memory": "8Gi"
          },
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          }
        },
        "storage": {
          "type": "emptyDir",
          "storageClassName": "kargo-vol",
          "storageSize": "45Gi",
          "provisioner": "kubernetes.io/azure-file",
          "reclaimPolicy": "Delete",
          "parameters": {
            "customParameters": {
              "skuName": "",
              "location": "",
              "storageAccount": ""
            }
          }
        },
        "readinessProbe": {
          "failureThreshold": 5,
          "initialDelaySeconds": 20,
          "periodSeconds": 60,
          "successThreshold": 1,
          "timeoutSeconds": 10
        },
        "livenessProbe": {
          "failureThreshold": 5,
          "initialDelaySeconds": 30,
          "periodSeconds": 60,
          "successThreshold": 1,
          "timeoutSeconds": 10
        }
      },
      "pod-elastalert_cfg": {
        "deployment": { "replicas": 1 },
        "livenessProbe": {
          "initialDelaySeconds": 20,
          "periodSeconds": 30,
          "timeoutSeconds": 30,
          "successThreshold": 1,
          "failureThreshold": 10
        }
      },
      "pod-cores_mgr": {
        "enabled": true,
        "kargoHTTPReqTimeout": 30,
        "rbacEnabled": true,
        "serviceAccountName": "cores-mgr-sa",
        "retentionPeriod": 0,
        "retentionSize": -1,
        "retentionPolicy": "OLDEST",
        "coresStorage": {
          "type": "nfs",
          "storageClassName": "cores-mgr-storage",
          "requestStorage": "5Gi",
          "nfs": {
            "capacityStorage": "5Gi",
            "coresPath": "{deployParameters.nfs-filepath}",
            "remoteHost": "{deployParameters.nfs-server}"
          }
        }
      }
    },
    "fed-istio": {
      "global": {
        "enableSCC": false,
        "multusDeployed": "{deployParameters.multusDeployed}",
        "istioUpgradedVersion": { "enable": false },
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "unity-cloud-serviceaccount",
        "podPriorityEnabled": true,
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-db-etcd",
            "fed-db-mongo-ram",
            "fed-metallb",
            "fed-prometheus",
            "fed-amf-mme",
            "fed-smf",
            "fed-upf",
            "fed-nrf",
            "fed-nssf",
            "fed-n3iwf",
            "fed-grafana",
            "fed-kibana",
            "fed-paas-helpers",
            "fed-jaeger",
            "fed-kube-prom",
            "vnfmgr",
            "fed-agf",
            "fed-elastalert",
            "fed-amf-mme"
          ]
        },
        "envVars": {
          "fedType": "paas-istio",
          "fedUniqueName": "{deployParameters.istio-unique-name}"
        },
        "monitoring_prometheus_ns": "fed-prometheus",
        "metricsScrapeInterval": "1m",
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ]
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "disablePolicyChecks": true,
        "telemetry": {
          "telemetryEnabled": "false",
          "enabled": false,
          "v2": { "enabled": false },
          "prometheus": { "enabled": false },
          "cpuRequest": "1000m",
          "cpuLimit": "4800m"
        },
        "mesh": {
          "istio": {
            "ingressGwIP": "{deployParameters.kiali-lb-ip}",
            "ingressGwFQDN": "kiali.com",
            "ingressGwPort": 20001,
            "ingressGwTLS": {
              "enabled": true,
              "mode": "SIMPLE",
              "certManager": {
                "enabled": true,
                "certDuration": "10h",
                "renewBefore": "1h",
                "organization": "affirmednetworks",
                "issuerName": "affirmed-clusterissuer"
              },
              "userProvided": {
                "enabled": false,
                "cacert": "",
                "tlscrt": "",
                "tlskey": ""
              }
            },
            "loadBalancerSharingKey": "paas",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
            }
          }
        },
        "loadBalancerSourceRanges": [],
        "overrides": { "preDeleteEnabled": true },
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        },
        "deployment": { "nodeDataplaneAffinity": "false" }
      },
      "pod-istio_gw": { "egressGateway": { "enabled": false } },
      "pod-istio": {
        "rbacEnabled": true,
        "istioSecurityServiceAccountName": "istio-security-post-install-account",
        "istioSecurityClusterRole": "istio-security-post-install",
        "istioGalleyServiceAccountName": "istio-galley-service-account",
        "istioGalleyClusterRole": "istio-galley",
        "kialiServiceAccountName": "kiali-service-account",
        "kialiClusterRole": "kiali",
        "istioMixerServiceAccountName": "istio-mixer-service-account",
        "istioMixerClusterRole": "istio-mixer",
        "istioPilotServiceAccountName": "istio-pilot-service-account",
        "istioPilotClusterRole": "istio-pilot",
        "istioCitadelServiceAccountName": "istio-citadel-service-account",
        "istioCitadelClusterRole": "istio-citadel",
        "istioSidecarServiceAccountName": "istio-sidecar-injector-service-account",
        "istioSidecarClusterRole": "istio-sidecar-injector",
        "istioMultiServiceAccountName": "istio-multi",
        "istioReaderClusterRole": "istio-reader",
        "istioRevision": "1-8-2",
        "istioNspace": "fed-istio",
        "istioinit": { "useMaistraUbi8Image": true },
        "istioproxy": {
          "accessLogFile": "",
          "accessLogEncoding": "TEXT",
          "includeIPRanges": "{deployParameters.istio-proxy-include-ip-ranges}",
          "excludeIPRanges": "127.0.0.1/24",
          "excludeOutboundPorts": "",
          "enableTracing": false,
          "enablePrometheusMerge": false
        },
        "istiopilot": {
          "istiodReplicas": 3,
          "discovery": {
            "requestCpu": "1500m",
            "traceSampling": "0.01"
          }
        },
        "paasSelector": {
          "jaegerHostName": "{deployParameters.jaeger-host}",
          "grafanaHostName": "10.15.10.161"
        },
        "istioOperator": {
          "renewDeadline": "{deployParameters.leader-election-renew-deadline}"
        }
      },
      "pod-redis": { "enabled": false }
    },
    "fed-service-reg": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-service-reg-serviceaccount",
        "enablePodSecurityPolicies": true,
        "podPriorityEnabled": true,
        "enableSCC": false,
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        },
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-paas-helpers",
            "fed-db-etcd",
            "fed-db-mongo-ram",
            "fed-istio",
            "fed-metallb",
            "fed-prometheus",
            "fed-amf-mme",
            "fed-smf",
            "fed-upf",
            "fed-nrf",
            "fed-nssf",
            "fed-n3iwf",
            "fed-agf"
          ]
        },
        "serverAclInitServiceAccountName": "fed-service-reg-pod-service-reg-server-acl-init",
        "serverAclInitClusterRole": "fed-service-reg-pod-service-reg-server-acl-init",
        "enterpriseLicenseServiceAccountName": "fed-service-reg-pod-service-reg-enterprise-license",
        "enterpriseLicenseClusterRole": "fed-service-reg-pod-service-reg-enterprise-license",
        "envVars": {
          "fedType": "paas-service-registry",
          "fedUniqueName": "{deployParameters.service-reg-unique-name}"
        },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ]
        },
        "grafana": {
          "enabled": false,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "metricsScrapeInterval": "1m",
        "overrides": { "preDeleteEnabled": false },
        "deployment": { "nodeDataplaneAffinity": "false" }
      },
      "pod-service_reg": {
        "rbacEnabled": true,
        "client": {
          "clientServiceAccountName": "fed-service-reg-pod-service-reg-client",
          "clientClusterRole": "fed-service-reg-pod-service-reg-client",
          "clientNftServiceAccountName": "fed-service-reg-pod-service-reg-client-nft",
          "nftClusterRole": "permissive-full-cr",
          "limits": { "http_max_conns_per_client": 2000 }
        },
        "server": {
          "replicas": 3,
          "bootstrapExpect": 3,
          "serverServiceAccountName": "fed-service-reg-pod-service-reg-server",
          "serverClusterRole": "fed-service-reg-pod-service-reg-server"
        },
        "syncCatalog": {
          "syncCatalogServiceAccountName": "fed-service-reg-pod-service-reg-sync-catalog",
          "syncCatalogClusterRole": "fed-service-reg-pod-service-reg-sync-catalog"
        },
        "connectInject": {
          "connectInjectServiceAccountName": "fed-service-reg-pod-service-reg-connect-injector-webhook",
          "connectInjectClusterRole": "fed-service-reg-pod-service-reg-connect-injector-webhook"
        }
      }
    },
    "fed-grafana": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-grafana-serviceaccount",
        "podPriorityEnabled": true,
        "enableSCC": false,
        "enableUserProvidedSCC": false,
        "kargoProfileTag": "grafana",
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-db-etcd",
            "fed-paas-helpers",
            "fed-istio",
            "fed-prometheus"
          ]
        },
        "vault": {
          "enabled": false,
          "hashicorpVault": {
            "enabled": true,
            "service": "http://fed-vault-svc-internal.fed-vault:8200"
          },
          "azureKeyVault": { "enabled": false }
        },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ]
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "adminPassword": "{deployParameters.admin-password}",
        "monitoring": { "prometheus": { "enabled": true } },
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.grafana-unique-name}"
        },
        "metricsScrapeInterval": "1m",
        "mesh": {
          "istio": {
            "ingressGwIP": "{deployParameters.grafana-lb-ip}",
            "ingressGwFQDN": "grafana.com",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
            },
            "ingressGwPort": 3000,
            "ingressGwTLS": {
              "enabled": false,
              "mode": "SIMPLE",
              "certManager": {
                "enabled": true,
                "certDuration": "10h",
                "renewBefore": "1h",
                "organization": "affirmednetworks",
                "issuerName": "affirmed-clusterissuer"
              },
              "userProvided": {
                "enabled": false,
                "cacert": "",
                "tlscrt": "",
                "tlskey": ""
              }
            },
            "loadBalancerSharingKey": "paas"
          }
        },
        "loadBalancerSourceRanges": "",
        "overrides": {
          "preDeleteEnabled": false,
          "postInstallEnabled": false
        }
      },
      "pod-istio_gw": {
        "istioNspace": "fed-istio",
        "istioRevision": "1-8-2",
        "egressGateway": { "enabled": false }
      },
      "pod-grafana": {
        "debug": false,
        "enabled": true,
        "rbacEnabled": true,
        "serviceAccountName": "grafana-serviceaccount",
        "readinessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 60,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        },
        "livenessProbe": {
          "failureThreshold": 10,
          "initialDelaySeconds": 60,
          "periodSeconds": 5,
          "successThreshold": 1,
          "timeoutSeconds": 30
        }
      }
    },
    "fed-prometheus": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-prometheus-serviceaccount",
        "podPriorityEnabled": true,
        "enableSCC": false,
        "kargoProfileTag": "prometheus",
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-db-etcd",
            "fed-istio",
            "fed-elastic",
            "fed-grafana"
          ]
        },
        "metricsScrapeInterval": "1m",
        "deployment": { "nodeDataplaneAffinity": "false" },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ],
          "alerts": {
            "enabled": false,
            "host": "",
            "port": 3030,
            "realert": { "minutes": 1 },
            "receivers": [
              { "slack": { "webhookurl": "" } },
              { "post": { "http_post_url": "" } },
              {
                "email": {
                  "to_address": "",
                  "smtp_host": "",
                  "smtp_port": "",
                  "smtp_ssl": false,
                  "from_addr": ""
                }
              }
            ]
          }
        },
        "mesh": {
          "istio": {
            "ingressGwIP": "{deployParameters.prometheus-lb-ip}",
            "ingressGwFQDN": "prometheus.com",
            "ingressSvcLabel": "prometheus",
            "ingressGwPort": 9098,
            "mtlsEnabled": false,
            "ingressGwTLS": {
              "enabled": true,
              "mode": "SIMPLE",
              "certManager": {
                "enabled": true,
                "certDuration": "10h",
                "renewBefore": "1h",
                "organization": "affirmednetworks",
                "issuerName": "affirmed-clusterissuer"
              },
              "userProvided": {
                "enabled": false,
                "cacert": "",
                "tlscrt": "",
                "tlskey": ""
              }
            },
            "ingressGwAdditionalServices": [
              {
                "ingressGwIP": "",
                "ingressGwFQDN": "alertmanager.com",
                "ingressGw": "alertmanager-ingress",
                "ingressSvcLabel": "alertmanager",
                "ingressGwPort": 9091,
                "mtlsEnabled": false,
                "ingressGwTLS": {
                  "enabled": true,
                  "mode": "SIMPLE"
                },
                "serviceAnnotations": {
                  "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
                  "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
                }
              },
              {
                "ingressGwIP": "",
                "ingressGwFQDN": "thanos.com",
                "ingressGw": "thanos-ingress",
                "ingressSvcLabel": "thanos",
                "ingressGwPort": 9090,
                "mtlsEnabled": false,
                "ingressGwTLS": {
                  "enabled": true,
                  "mode": "SIMPLE"
                },
                "serviceAnnotations": {
                  "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
                  "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
                }
              }
            ],
            "loadBalancerSharingKey": "paas",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
            }
          }
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.prometheus-unique-name}"
        },
        "loadBalancerSourceRanges": "",
        "overrides": {
          "preDeleteEnabled": false,
          "postInstallEnabled": false
        }
      },
      "pod-istio_gw": {
        "enabled": true,
        "rbacEnabled": true,
        "istioNspace": "fed-istio",
        "ingressGateway": {
          "enabled": true,
          "ingressGatewayServiceAccountName": "istio-ingressgateway-service-account"
        },
        "egressGateway": {
          "enabled": false,
          "egressGatewayServiceAccountName": "istio-egressgateway-service-account"
        },
        "paasSelector": {
          "jaegerHostName": "{deployParameters.istio-gw-jaeger-hostname}"
        }
      },
      "pod-prometheus": {
        "rbacEnabled": true,
        "serviceAccountNameOperator": "prometheus-operator-serviceaccount",
        "serviceAccountNamePrometheus": "prometheus-serviceaccount",
        "serviceAccountNameAlertmanager": "alertmanager-serviceaccount",
        "serviceAccountNameThanos": "thanos-serviceaccount",
        "config": {
          "global": { "resolve_timeout": "5m" },
          "route": {
            "group_wait": "30s",
            "group_interval": "2m",
            "repeat_interval": "2m",
            "receiver": "null"
          },
          "receivers": [
            { "name": "null" },
            {
              "name": "postreceiver",
              "webhook_configs": [
                {
                  "url": "http://XXXX",
                  "http_config": { "tls_config": { "insecure_skip_verify": true } }
                }
              ]
            },
            {
              "name": "emailreceiver",
              "email_configs": [
                {
                  "to": "user1@example.com",
                  "from": "user2@example.com",
                  "smarthost": "XXXX:80",
                  "auth_username": "user@example.com",
                  "auth_password": "password",
                  "require_tls": false,
                  "headers": {
                    "Subject": "Alert from: {{ .CommonLabels.alertname }} "
                  }
                }
              ]
            },
            {
              "name": "slackreceiver",
              "slack_configs": [
                {
                  "channel": "#channel_name",
                  "api_url": "http://XXXX",
                  "text": "summary: {{ .CommonAnnotations.summary }}\ndescription: {{ .CommonAnnotations.description }}",
                  "title": "Alert from: {{ .CommonLabels.alertname }}"
                }
              ]
            }
          ]
        },
        "promInstanceSelector": false,
        "name": "prometheus",
        "alertmanagerName": "prometheus-alerts",
        "serviceMonitor": { "istioNamespace": "fed-istio" },
        "prometheus": {
          "storage": {
            "type": "{deployParameters.storage-type}",
            "storageClassName": "rook-cephbp",
            "provisioner": "kubernetes.io/cinder",
            "parameters": {
              "cinder": {
                "type": "sannimbf300",
                "availability": "nova",
                "fsType": "ext4"
              },
              "azureDisk": {
                "storageaccounttype": "",
                "kind": ""
              },
              "customParameters": {}
            },
            "reclaimPolicy": "Delete",
            "allowVolumeExpansion": true,
            "resource": { "request": "100Gi" }
          },
          "retention": "3d",
          "remoteStorage": {
            "enabled": false,
            "remoteWriteUrl": "",
            "remoteWriteTimeout": "30s",
            "remoteReadUrl": ""
          },
          "enableAdminAPI": false,
          "resources": {
            "limits": {
              "cpu": "10",
              "memory": "24Gi"
            },
            "requests": {
              "cpu": "1",
              "memory": "4Gi"
            }
          }
        },
        "thanosQuery": {
          "name": "thanos-query",
          "deploy": {
            "logLevel": "info",
            "resources": {
              "requests": {
                "cpu": "1",
                "memory": "4Gi"
              },
              "limits": {
                "cpu": "4",
                "memory": "4Gi"
              }
            }
          },
          "service": { "externalIpAddress": "1.1.1.1" },
          "hpa": {
            "enabled": true,
            "minReplicas": 3,
            "maxReplicas": 6
          }
        },
        "thanos": {
          "enabled": true,
          "longTermStorage": {
            "enabled": false,
            "type": "AZURE",
            "config": {
              "storage_account": "",
              "storage_account_key": "",
              "container": ""
            }
          }
        },
        "probesCheck": {
          "liveliness": {
            "failureThreshold": 120,
            "initialDelaySeconds": 30,
            "periodSeconds": 60,
            "successThreshold": 1,
            "timeoutSeconds": 5
          },
          "readiness": {
            "failureThreshold": 120,
            "initialDelaySeconds": 30,
            "periodSeconds": 60,
            "successThreshold": 1,
            "timeoutSeconds": 5
          }
        },
        "httpAlertsThreshold": {
          "istio5xxErrorPercentage": 25,
          "istio4xxErrorPercentage": 25,
          "istioReqLatencySeconds": 5,
          "httpSrvr5xxErrorPercentage": 25,
          "httpSrvr4xxErrorPercentage": 50,
          "httpClientRespRcvd5xxErrorPercentage": 25,
          "httpClientRespRcvd460N499ErrorPercentage": 25,
          "httpSrvrReqRate": 500,
          "firingActiveAlertInterval": "2m"
        }
      }
    },
    "fed-db-etcd": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-db-etcd-serviceaccount",
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-paas-helpers",
            "fed-db-mongo-ram",
            "fed-istio",
            "fed-metallb",
            "fed-prometheus",
            "fed-amf-mme",
            "fed-smf",
            "fed-upf",
            "fed-nrf",
            "fed-nssf",
            "fed-n3iwf",
            "fed-agf"
          ]
        },
        "enableSCC": false,
        "podPriorityEnabled": true,
        "deployment": { "nodeDataplaneAffinity": "false" },
        "envVars_ServiceRegistryNamespace": "fed-service-reg",
        "kargoProfileTag": "etcd",
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ]
        },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.db-etcd-unique-name}"
        },
        "overrides": { "preDeleteEnabled": false }
      },
      "pod-etcd_operator": {
        "rbacEnabled": true,
        "serviceAccount": {
          "etcdOperatorServiceAccount": {
            "create": true,
            "name": "etcdoperator-sa"
          },
          "backupOperatorServiceAccount": {
            "create": false,
            "name": "backupoperator-sa"
          },
          "restoreOperatorServiceAccount": {
            "create": false,
            "name": "restoreoperator-sa"
          }
        },
        "loadBalancerService": {
          "enabled": false,
          "loadBalancerIP": "{deployParameters.db-etcd-lb-ip}",
          "loadBalancerFQDN": "",
          "loadBalancerSharingKey": "",
          "port": 31379,
          "serviceAnnotations": {
            "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
            "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
          }
        },
        "etcdOperator": {
          "image": { "ramMode": true },
          "commandArgs": { "disaster-recovery": "true" }
        },
        "etcdCluster": {
          "size": 3,
          "podDisruptionBudget": { "enabled": true },
          "pod": {
            "resources": {
              "requests": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "limits": {
                "cpu": "2",
                "memory": "8Gi"
              }
            },
            "affinity": {},
            "cluster": { "ClusterDomain": ".cluster.local" }
          }
        },
        "singlenodecluster": { "enabled": false },
        "etcdDefrag": {
          "enabled": true,
          "schedule": "*/30 * * * *",
          "jobHistory": 1
        }
      }
    },
    "fed-redis-operator": {
      "global": {   
        "metricsScrapeInterval": "1m",
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.redis-operator-unique-name}"
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ],
          "alerts": {
            "enabled": false,
            "host": "",
            "port": 3030,
            "realert": { "minutes": 1 },
            "receivers": [
              {
                "email": {
                  "to_address": "",
                  "smtp_host": "",
                  "smtp_port": "",
                  "smtp_ssl": false,
                  "from_addr": ""
                }
              }
            ]
          }
        },
        "defaultRbacEnabled": true,
        "podPriorityEnabled": true,
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        }
      },
      "pod-redis_operator": {
        "rbacEnabled": true,
        "replicaCount": 3,
        "imagePullPolicy": "IfNotPresent",
        "logLevel": 6,
        "args": [ "--logtostderr=true", "--alsologtostderr" ],
        "prometheus": { "enabled": true },
        "resources": {
          "limits": {
            "cpu": "200m",
            "memory": "256Mi"
          },
          "requests": {
            "cpu": "100m",
            "memory": "100Mi"
          }
        },
        "livenessProbe": { "initialDelaySeconds": 30 },
        "readinessProbe": { "initialDelaySeconds": 5 },
        "zoneAwareReplication": true
      }
    },
    "fed-redis-cluster": {
      "global": {    
        "envVars": {
          "fedType": "paas",
          "fedUniqueName": "{deployParameters.redis-cluster-unique-name}"
        },
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        },
        "monitoring": { "prometheus": { "enabled": true } },
        "kargoProfileTag": "redis",
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "512m",
              "retryWait": "180s",
              "maxRetries": 10
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "",
                "port": 24224
              }
            }
          ],
          "alerts": {
            "enabled": false,
            "host": "",
            "port": 3030,
            "realert": { "minutes": 1 },
            "receivers": [
              {
                "email": {
                  "to_address": "",
                  "smtp_host": "",
                  "smtp_port": "",
                  "smtp_ssl": false,
                  "from_addr": ""
                }
              }
            ]
          }
        },
        "defaultRbacEnabled": true,
        "podPriorityEnabled": true
      },
      "pod-redis_cluster": {
        "nameOverride": "node-for-redis",
        "fullnameOverride": "node-for-redis",
        "numberOfPrimaries": 3,
        "replicationFactor": 2,
        "imagePullPolicy": "IfNotPresent",
        "prometheus": { "enabled": true },
        "rbacEnabled": true,
        "serviceAccount": { "name": "node-for-redis" },
        "resources": {
          "limits": {
            "cpu": "1",
            "memory": "4Gi"
          },
          "requests": {
            "cpu": "1",
            "memory": "4Gi"
          }
        },
        "metrics": { "enabled": true },
        "redis": {
          "configuration": {
            "file": "",
            "valueMap": { "save": "" }
          }
        }
      }
    },
    "fed-smf": {
      "global": {
        "defaultRbacEnabled": true,
        "defaultClusterRole": "permissive-network-cr",
        "defaultServiceAccountName": "fed-smf-serviceaccount",
        "enableSCC": false,
        "podPriorityEnabled": true,
        "kargoProfileTag": "smf",
        "ingressNetworkPolicy": {
          "enabled": true,
          "ingressTrafficNamespaces": [
            "fed-service-reg",
            "fed-db-etcd",
            "fed-paas-helpers",
            "fed-istio",
            "fed-prometheus",
            "fed-smf-test",
            "fed-upf-sim",
            "fed-upf-sim2",
            "fed-upf-sim3"
          ]
        },
        "topologySpreadConstraints": {
          "enabled": true,
          "constraints": [
            {
              "maxSkew": 1,
              "topologyKey": "kubernetes.io/hostname",
              "whenUnsatisfiable": "ScheduleAnyway"
            }
          ]
        },
        "udsf": {
          "monitoringEnabled": true,
          "server": {
            "host": "redis-cluster.fed-redis-cluster.svc.cluster.local",
            "port": "6379"
          }
        },
        "tabdb": {
          "etcd": {
            "name": "etcd-server",
            "svc": "etcd-cluster-client.fed-db-etcd.svc.cluster.local",
            "port": "2379",
            "targetPort": "31869"
          }
        },
        "enablePdbs": true,
        "fileserver": {
          "ui": {
            "loadBalancerIP": "",
            "loadBalancerPort": "85",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
            }
          },
          "nfs": {
            "remoteHost": "{deployParameters.nfs-server}",
            "remotePath": "{deployParameters.nfs-filepath}",
            "remotePort": "85"
          },
          "cephfs": { "enabled": false }
        },
        "mesh": {
          "istio": {
            "ingressGw": "ingress-gateway",
            "ingressGwIP": "{deployParameters.smf-ingress-gw-lb-ip}",
            "ingressGwFQDN": "smf.com",
            "ingressGwMaxConcurrentStreams": 1536,
            "ingressGwInitialStreamWindowSize": 262144,
            "mtlsEnabled": false,
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.gn-lb-subnet}"
            },
            "ingressGwLi": {
              "ingressGw": "ingress-gateway-li",
              "ingressGwIP": "{deployParameters.smf-ingress-gw-li-lb-ip}",
              "ingressGwFQDN": "smfli.com",
              "ingressGwHttpPort": "",
              "ingressGwHttpsPort": "",
              "mtlsEnabled": false,
              "ingressGwLiMaxConcurrentStreams": 1536,
              "ingressGwInitialStreamWindowSize": 262144,
              "ingressInitialProtocol": "https",
              "serviceAnnotations": {
                "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
                "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.li-lb-subnet}"
              },
              "ingressMultiSNI": {
                "enabled": false,
                "host": [ { "name": "smf.litest.com" } ]
              }
            },
            "ingressGwTLSLi": {
              "enabled": false,
              "mode": "MUTUAL",
              "userProvided": {
                "enabled": false,
                "cacert": "",
                "tlscrt": "",
                "tlskey": ""
              }
            },
            "egressGwTLSLi": {
              "enabled": false,
              "mode": "MUTUAL",
              "userProvided": {
                "enabled": false,
                "cacert": "",
                "tlscrt": "",
                "tlskey": ""
              }
            }
          },
          "filter": {
            "enabled": true,
            "name": "smfcc-filter-plugin",
            "mountPath": "/etc/filters"
          }
        },
        "monitoring": {
          "prometheus": {
            "enabled": true,
            "namespace": "fed-prometheus"
          }
        },
        "metricsScrapeInterval": "30s",
        "grafana": {
          "enabled": true,
          "url": "{deployParameters.grafana-url}",
          "prometheusinfo": { "url": "http://prometheus.fed-prometheus:9090" }
        },
        "logging": {
          "enabled": false,
          "fluentd": {
            "buffer": {
              "bufferLimit": "32m",
              "retryWait": "10s",
              "maxRetries": 1
            }
          },
          "elastic": {
            "IP": "{deployParameters.elasticsearch-host}",
            "Port": 9200
          },
          "enableAddlTargets": false,
          "addlTargets": [
            {
              "forward": {
                "name": "fluentd",
                "host": "{deployParameters.fluentd-targets-host}",
                "port": 24224
              }
            }
          ],
          "alerts": {
            "enabled": false,
            "host": "",
            "port": 3030,
            "realert": { "minutes": 1 },
            "receivers": [
              { "slack": { "webhookurl": "" } },
              { "post": { "http_post_url": "" } },
              {
                "email": {
                  "to_address": "",
                  "smtp_host": "",
                  "smtp_port": "",
                  "smtp_ssl": false,
                  "from_addr": ""
                }
              }
            ]
          }
        },
        "license": {
          "flexera": {
            "remoteHost": "{deployParameters.license-host}",
            "remotePort": "{deployParameters.license-port}",
            "enabled": false
          }
        },
        "envVars": {
          "fedType": "smf",
          "fedUniqueName": "{deployParameters.smf-unique-name}",
          "serviceRegistryNamespace": "fed-service-reg",
          "encryptPaasDataForLI": true,
          "configDataEncryptionEnable": false
        },
        "encryptDecyptKey": {
          "enabled": true,
          "key": "afct89Ibno"
        },
        "encryptConfigKey": {
          "enabled": true,
          "key": "qrdi86Lghm"
        },
        "loadBalancerSourceRanges": "[]",
        "enableExternalChfInterface": true,
        "enableLocalCdrsInterface": false,
        "enableGtpcAgent": true,
        "externalLBSvc": {
          "enabled": true,
          "configs": {
            "worker-connections": "20000",
            "worker-processes": "16",
            "gtpc_port": "5000 6000",
            "pfcp_port": "7000 10000"
          }
        },
        "externalLB": {
          "pfcp_udp_svc": {
            "enabled": false,
            "transportConfig": {
              "udpRequests": 1,
              "udpResponses": 1,
              "nextUpstream": true,
              "nextUpstreamTimeout": "20s",
              "nextUpstreamTries": 1
            },
            "loadBalancingMethod": "hash ${pfcp} consistent",
            "configs": { "timeout": "60s" }
          },
          "gtpc_udp_svc": {
            "enabled": true,
            "transportConfig": {
              "udpRequests": 10,
              "udpResponses": 1,
              "nextUpstream": true,
              "nextUpstreamTimeout": "20s",
              "nextUpstreamTries": 1
            },
            "loadBalancingMethod": "",
            "configs": { "timeout": "60s" }
          }
        },
        "externalGtpcSvc": [
          {
            "enabled": true,
            "name": "{deployParameters.gtpc-agent-ext-svc-name}",
            "loadBalancerIP": "{deployParameters.gtpc-agent-lb-ip}",
            "loadBalancerFQDN": "s5-s8-s2a-s2b-pgw.com",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.gn-lb-subnet}"
            },
            "type": [ "{deployParameters.gtpc-agent-ext-svc-type}" ]
          }
        ],
        "externalPfcpSvc": [
          {
            "enabled": true,
            "name": "{deployParameters.pfcp-ext-svc-name}",
            "loadBalancerIP": "{deployParameters.pfcp-lb-ip}",
            "loadBalancerFQDN": "",
            "serviceAnnotations": {
              "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
              "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.n4-lb-subnet}"
            },
            "type": [ "{deployParameters.pfcp-ext-svc-type}" ]
          }
        ],
        "enableLIX1": true,
        "enableLIX2": true,
        "enableNchfUsageReplay": true,
        "enableLivenessProbe": true,
        "resource": {
          "defaultlimit": {
            "cpu": 8,
            "memory": "3Gi"
          },
          "defaultrequest": {
            "cpu": "10m",
            "memory": "10Mi"
          }
        }
      },
      "pod-fileserver": {
        "enabled": true,
        "deployment": { "replicas": 1 },
        "pvc": {
          "web": {
            "requestsStorage": "5Gi",
            "storageClassName": "web"
          },
          "cfg": {
            "requestsStorage": "5Gi",
            "storageClassName": "cfg"
          }
        }
      },
      "pod-cfgmgr": {
        "enabled": true,
        "confd": { "aes256cfb128Key": "" },
        "rbacEnabled": true,
        "clusterRole": "permissive-full-cr",
        "serviceAccountName": "cfgmgr-serviceaccount",
        "deployment": { "replicas": 1 },
        "service": {
          "loadBalancerIP": "{deployParameters.smf-cfgmgr-lb-ip}",
          "loadBalancerFQDN": "",
          "serviceAnnotations": {
            "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
            "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.oam-lb-subnet}"
          }
        },
        "cfgmgrFQDN": "cfgmgr.com",
        "certManager": {
          "enabled": true,
          "certDuration": "10h",
          "renewBefore": "1h",
          "organization": "affirmednetworks",
          "issuerName": "affirmed-clusterissuer"
        },
        "userProvided": {
          "enabled": false,
          "cacert": "",
          "tlscrt": "",
          "tlskey": ""
        },
        "security": {
          "enable_local_passwd_auth": "1",
          "enable_root": "0",
          "local_admin_users": [
            {
              "passwd": "default",
              "pubkey": "",
              "user": "admin"
            }
          ],
          "local_liadmin_users": [
            {
              "passwd": "default",
              "pubkey": "",
              "user": "liadmin"
            }
          ],
          "local_lioper_users": [
            {
              "passwd": "default",
              "pubkey": "",
              "user": "lioper"
            }
          ],
          "local_oper_users": [
            {
              "passwd": "default",
              "pubkey": "",
              "user": "oper"
            }
          ],
          "local_readonly_users": [
            {
              "passwd": "default",
              "pubkey": "",
              "user": "guest"
            }
          ]
        }
      },
      "pod-istio_gw": {
        "enabled": true,
        "rbacEnabled": true,
        "istioNspace": "fed-istio",
        "podDisruptionBudget": { "minAvailable": "10%" },
        "ingressGateway": {
          "enabled": true,
          "ingressGatewayServiceAccountName": "istio-ingressgateway-service-account",
          "podPriority": { "enabled": false }
        },
        "egressGateway": {
          "enabled": true,
          "egressGatewayServiceAccountName": "istio-egressgateway-service-account"
        },
        "paasSelector": { "jaegerHostName": "fqdn.com" }
      },
      "pod-istio_gw_li": {
        "enabled": true,
        "rbacEnabled": true,
        "podDisruptionBudget": { "minAvailable": "10%" },
        "istioNspace": "fed-istio",
        "ingressGateway": {
          "enabled": true,
          "ingressGatewayLiServiceAccountName": "istio-ingressgateway-li-service-account"
        },
        "egressGateway": {
          "enabled": true,
          "egressGatewayLiServiceAccountName": "istio-egressgateway-li-service-account",
          "hpa": {
            "enabled": true,
            "workerCpuRequests": "200m",
            "minReplicas": 1,
            "maxReplicas": 5,
            "averageUtilization": 80
          }
        },
        "paasSelector": { "jaegerHostName": "fqdn.com" }
      },
      "pod-nrf_agent": {
        "enabled": true,
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "deployment": {
          "replicas": 1,
          "apiServiceHost": "",
          "apiServicePort": "80"
        },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "380m",
          "workerCpuRequests": "600m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 3,
          "minReplicas": 2,
          "averageUtilization": 80
        },
        "log": {
          "throttlerEnable": true,
          "throttlerMax": 10,
          "throttlerInterval": 60,
          "throttlerSwerr": 1,
          "startupDelay": 30
        }
      },
      "pod-nginx": {
        "rbacEnabled": true,
        "serviceAccountName": "nginx-serviceaccount",
        "controller": { "ingressClass": "smf.nginx" }
      },
      "pod-sub_analyzer": {
        "enabled": true,
        "deployment": {
          "replicas": 1,
          "apiServiceHost": "analyzer.com"
        },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "200m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 5,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "log": {
          "throttlerEnable": true,
          "throttlerMax": 10,
          "throttlerInterval": 60,
          "throttlerSwerr": 1,
          "startupDelay": 30
        }
      },
      "pod-timer": {
        "enabled": true,
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "deployment": { "replicas": 3 },
        "rbacEnabled": true,
        "role": "chronos-operator-role",
        "serviceAccountName": "chronos-operator-serviceaccount"
      },
      "pod-pfcp_c": {
        "enabled": true,
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "service": {
          "loadBalancerIP": "{deployParameters.pfcp-c-loadbalancer-ip}",
          "externalFqdn": "",
          "serviceAnnotations": {
            "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
            "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.gn-lb-subnet}"
          }
        },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "390m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 6,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-event_exposure": {
        "enabled": true,
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "podDisruptionBudget": { "minAvailable": "10%" },
        "deployment": {
          "dynamicPccEnabled": "true",
          "enableSmfccDebugLogs": false,
          "replicas": 1
        },
        "tracing": {
          "enabled": true,
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "kafkaCpuRequests": "10m",
          "workerCpuRequests": "390m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 6,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-smfcc": {
        "enabled": true,
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "consistentHashRingSize": "1048576",
        "semLoadBalMinRingSize": "10240",
        "podDisruptionBudget": { "minAvailable": "10%" },
        "deployment": {
          "dynamicPccEnabled": "true",
          "enableSmfccDebugLogs": false,
          "replicas": 1
        },
        "alert": { "minPduSesionCreateSuccessRate": 90 },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "kafkaCpuRequests": "10m",
          "workerCpuRequests": "390m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 6,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        },
        "log": {
          "throttlerEnable": true,
          "throttlerMax": 10,
          "throttlerInterval": 60,
          "throttlerSwerr": 1,
          "throttlerStartupDelay": 30
        }
      },
      "pod-urm": {
        "enabled": true,
        "deployment": {
          "enableUrmLogs": false,
          "replicas": 1
        },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "390m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 6,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-smf_monitor": {
        "enabled": true,
        "gaugeUpdateInterval": 300,
        "deployment": { "replicas": 1 }
      },
      "pod-inband_data_agt": {
        "enabled": true,
        "deployment": {
          "enableIdaLogs": false,
          "replicas": 1
        },
        "service": {
          "loadBalancerIP": "{deployParameters.inband-data-agent-lb-ip}",
          "serviceAnnotations": {
            "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
            "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "{deployParameters.gn-lb-subnet}"
          }
        },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "390m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 3,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-chf_agent": {
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "hpa": {
          "enabled": true,
          "minReplicas": 1,
          "maxReplicas": 5,
          "infraCpuRequests": "100m",
          "kafkaCpuRequests": "100m",
          "workerCpuRequests": "800m",
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-cdr_agent": {
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "nfs": {
          "storage": "5Gi",
          "storageClass": "cdr-nfs",
          "lcdrPath": "{deployParameters.lcdr-filepath}",
          "pvName": "cdr-nfs-pv",
          "pvcName": "cdr-nfs-pvc",
          "directory": "/user/accounting/lcdr"
        },
        "storage": {
          "type": "local",
          "storageClassName": "rook-cephfs",
          "cdrStorageSize": "5Gi",
          "directory": "/user/accounting/lcdr",
          "pvcName": "cdr-cephfs-pvc"
        },
        "hpa": {
          "enabled": true,
          "minReplicas": 1,
          "maxReplicas": 5,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "460m",
          "averageUtilization": 50
        },
        "tracing": {
          "enabled": false,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-gtpc_agent": {
        "legacyLB": false,
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "460m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 3,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": false,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        }
      },
      "pod-li_x1": {
        "rbacEnabled": true,
        "clusterRole": "permissive-network-cr",
        "serviceAccountName": "li-x1-serviceaccount",
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "460m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 5,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-li_x2": {
        "rbacEnabled": true,
        "clusterRole": "permissive-network-cr",
        "serviceAccountName": "li-x2-serviceaccount",
        "cnaInfraThreadPoolSizeDbClient": "1000",
        "deployment": { "replicas": 1 },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "hpa": {
          "enabled": true,
          "infraCpuRequests": "10m",
          "workerCpuRequests": "460m",
          "workerCpuLimits": "1000m",
          "maxReplicas": 5,
          "minReplicas": 1,
          "averageUtilization": 80
        },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      },
      "pod-kafka_rplay_agt": {
        "deployment": { "replicas": 1 },
        "hpa": {
          "enabled": true,
          "minReplicas": 1,
          "maxReplicas": 5,
          "infraCpuRequests": "50m",
          "kafkaCpuRequests": "200m",
          "workerCpuRequests": "700m",
          "averageUtilization": 80
        },
        "tracing": {
          "enabled": true,
          "samplerType": "probabilistic",
          "samplerParam": "1.0",
          "agentPort": "6831",
          "logEnabled": "false"
        },
        "podDisruptionBudget": { "minAvailable": "10%" },
        "upgrade": {
          "canary": false,
          "canaryVersWeight": 0,
          "stableVersWeight": 0,
          "stableVersion": "0.0.0",
          "stableInfraImage": "",
          "stableWorkerImage": ""
        }
      }
    }
  }
