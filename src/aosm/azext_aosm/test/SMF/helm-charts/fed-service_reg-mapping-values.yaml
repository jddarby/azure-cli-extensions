#
# Affirmed Networks, Inc.
#
# Mark Garti (mark_garti@affirmednetworks.com)
# 25-Jun-2019
# CNA Infrastructure
#
# fed-service_reg
# values.yaml
#
# This federation is a K8s cluster wide Consul "Service Registry cluster".
# Where the latter cluster refers to the Consul Raft Server Cluster.
#
global:
  #defaultRbacConfiguration 
  defaultRbacEnabled: true
  defaultClusterRole: permissive-network-cr
  defaultServiceAccountName: fed-service-reg-serviceaccount
  #enablePSP
  enablePodSecurityPolicies: true
  podPriorityEnabled: true

  # enableSCC is a boolean flag that controls whether security context constraints (SCCs)
  # are created for the consul components created by this chart. SCCs are applicable to openshift deployments.
  # See https://docs.openshift.com/container-platform/latest/authentication/managing-security-context-constraints.html
  enableSCC: false

  # Definition of pod topology spread constraints
  # to uniformly spread all the pods across all the
  # K8s worker nodes.
  topologySpreadConstraints:
    enabled: true
    constraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway

  # NetworkPolicy Configuration
  ingressNetworkPolicy:
    # enabled: true -> enables networkpolicy in federation, false -> disables networkpolicy in federation
    enabled: true
    # Namespaces which are required to be allowed for ingress traffic
    ingressTrafficNamespaces:
    - fed-paas-helpers
    - fed-db-etcd
    - fed-db-mongo-ram
    - fed-istio
    - fed-metallb
    - fed-prometheus
    - fed-amf-mme
    - fed-smf
    - fed-upf
    - fed-nrf
    - fed-nssf
    - fed-n3iwf
    - fed-agf
    - fed-timer

  #clusterRole configuration is used to configure the clusterrole.
  #serviceAccountName configuration is used to create serviceaccount per pod.
  serverAclInitServiceAccountName: fed-service-reg-pod-service-reg-server-acl-init
  serverAclInitClusterRole: fed-service-reg-pod-service-reg-server-acl-init
  enterpriseLicenseServiceAccountName: fed-service-reg-pod-service-reg-enterprise-license
  enterpriseLicenseClusterRole: fed-service-reg-pod-service-reg-enterprise-license

  # PaaS Registry Selector 
  registry:
    docker:
      repoPath: "a4oprodaf.a4opacketcore.microsoft.com/rel_build_docker"

  # Environment variables
  envVars:
    fedType: "paas-service-registry"       
    fedUniqueName: "{deployParameters.service-reg-unique-name}"

  logging:
    enabled: false
    fluentd:
      buffer:
        bufferLimit: 512m  # Total buffer size. Maximum amount of buffer space each fluentd thread would use to keep logs. After this is exhaused, fluentd would start deleting oldest logs to make room for new logs.
        retryWait: 180s    # Interval(seconds) at which the buffer flush is retried in case of failure.
        maxRetries: 10     # Max number of retries to flush a buffer chunk. After this is exhausted, fluentd would delete the chunk.
    elastic:
      IP: "{deployParameters.elasticsearch-host}"
      Port: 9200
    enableAddlTargets: false
    addlTargets:
    - forward:
        name: fluentd
        host: ""
        port: 24224

  grafana:
    enabled: false
    # If Grafana is enabled, please add a valid Grafana server URL as per the following guidelines.
    # If Grafana is deployed WITHOUT TLS: "http://[grafana-ip]:[grafana-port]" OR "http://[paas-lb-ip]:[grafana-port]" (by-default grafana-port is 3000)
    # If Grafana is deployed WITH TLS: "https://[grafana-ip]:[grafana-port]" OR "https://[paas-lb-ip]:[grafana-port]" (by-default grafana-port is 3000)
    url: "{deployParameters.grafana-url}"
    prometheusinfo:
      url: "http://prometheus.fed-prometheus:9090"  #Devskim: ignore DS137138

  monitoring:
    prometheus:
      enabled: true

  # Prometheus metric scrape interval. Default value set to 1m.
  metricsScrapeInterval: 1m

  overrides:
    preDeleteEnabled: false

  # Node Affinity settings  CN-40059
  deployment:
    nodeDataplaneAffinity: "false"

# end globals section
############################

pod-service_reg:
  rbacEnabled: true

  client:
    #clusterRole configuration is used to configure the clusterrole.
    #serviceAccountName configuration is used to create serviceaccount per pod.
    clientServiceAccountName: fed-service-reg-pod-service-reg-client
    clientClusterRole: fed-service-reg-pod-service-reg-client
    clientNftServiceAccountName: fed-service-reg-pod-service-reg-client-nft
    nftClusterRole: permissive-full-cr

    # Limits specify constraints applied to connections to the Consul client.
    limits:
      # http_max_conns_per_clinet is the maximum number of active HTTP
      # connections to the Consul client. When this option is completely unset,
      # it defaults to 200.
      http_max_conns_per_client: 2000
      
  server:

    # The replica count must be 3 or greater for production.
    replicas: 3
    bootstrapExpect: 3

    #clusterRole configuration is used to configure the clusterrole.
    #serviceAccountName configuration is used to create serviceaccount per pod.
    serverServiceAccountName: fed-service-reg-pod-service-reg-server
    serverClusterRole: fed-service-reg-pod-service-reg-server
   
    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    #       
    resources:
      limits:
        memory: ""
        cpu: ""
      requests:
        memory: ""
        cpu: ""
  
  syncCatalog:
    #clusterRole configuration is used to configure the clusterrole.
    #serviceAccountName configuration is used to create serviceaccount per pod.
    syncCatalogServiceAccountName: fed-service-reg-pod-service-reg-sync-catalog
    syncCatalogClusterRole: fed-service-reg-pod-service-reg-sync-catalog

  connectInject:
    #clusterRole configuration is used to configure the clusterrole.
    #serviceAccountName configuration is used to create serviceaccount per pod.
    connectInjectServiceAccountName: fed-service-reg-pod-service-reg-connect-injector-webhook
    connectInjectClusterRole: fed-service-reg-pod-service-reg-connect-injector-webhook
