// Copyright (c) Microsoft Corporation.

// This file creates an NF definition for a CNF
param location string
@description('Name of an existing publisher, expected to be in the resource group where you deploy the template')
param publisherName string
@description('Name of an existing ACR-backed Artifact Store, deployed under the publisher.')
param acrArtifactStoreName string
@description('Name of an existing Network Function Definition Group')
param nfDefinitionGroup string
@description('The version of the NFDV you want to deploy, in format A.B.C')
param nfDefinitionVersion string

// If using publish command, this is created from deploying the cnfbase.bicep
resource publisher 'Microsoft.HybridNetwork/publishers@2023-09-01' = {
  name: publisherName
  location: location
  properties: { scope: 'Private'}
}

// If using publish command, this is created from deploying the cnfbase.bicep
resource acrArtifactStore 'Microsoft.HybridNetwork/publishers/artifactStores@2023-09-01' = {
  parent: publisher
  name: acrArtifactStoreName
  location: location
  properties: {
    storeType: 'AzureContainerRegistry'
  }
}

// If using publish command, this is created from deploying the cnfbase.bicep
resource nfdg 'Microsoft.Hybridnetwork/publishers/networkfunctiondefinitiongroups@2023-09-01' = {
  parent: publisher
  name: nfDefinitionGroup
  location: location
}

// This will deploy an NFDV in 'Preview' state. It should be changed to 'Active' once it is finalised.
resource nfdv 'Microsoft.Hybridnetwork/publishers/networkfunctiondefinitiongroups/networkfunctiondefinitionversions@2023-09-01' = {
  parent: nfdg
  name: nfDefinitionVersion
  location: location
  properties: {
    {#- Note that all paths in bicep must be specified using the forward slash #}
    {#-  (/) character even if running on Windows. #}
    {#- See https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/modules#local-file #}
    deployParameters: string(loadJsonContent('{{deployment_parameters_file}}'))
    networkFunctionType: 'ContainerizedNetworkFunction'
    networkFunctionTemplate: {
      nfviType: 'AzureArcKubernetes'
      networkFunctionApplications: [
      {%- for configuration in acr_nf_applications %}
        {
          artifactType: 'HelmPackage'
          name: '{{ configuration.name }}'
          dependsOnProfile: {
            installDependsOn: {{ configuration.depends_on_profile.install_depends_on }}
            uninstallDependsOn: {{ configuration.depends_on_profile.uninstall_depends_on }}
            updateDependsOn: {{ configuration.depends_on_profile.update_depends_on }}
          }
          artifactProfile: {
            artifactStore: {
              id: acrArtifactStore.id
            }
            helmArtifactProfile: {
              helmPackageName: '{{ configuration.artifact_profile.helm_artifact_profile.helm_package_name }}'
              helmPackageVersionRange: '{{ configuration.artifact_profile.helm_artifact_profile.helm_package_version_range }}'
              registryValuesPaths: {{ configuration.artifact_profile.helm_artifact_profile.registry_values_paths }}
              imagePullSecretsValuesPaths: {{ configuration.artifact_profile.helm_artifact_profile.image_pull_secrets_values_paths }}
            }
          }
          deployParametersMappingRuleProfile: {
            applicationEnablement: 'Enabled'
            helmMappingRuleProfile: {
              releaseNamespace: '{{ configuration.deploy_parameters_mapping_rule_profile.helm_mapping_rule_profile.release_namespace }}'
              releaseName: '{{ configuration.deploy_parameters_mapping_rule_profile.helm_mapping_rule_profile.release_name }}'
              helmPackageVersion: '{{ configuration.deploy_parameters_mapping_rule_profile.helm_mapping_rule_profile.helm_package_version }}'
              values: string(loadJsonContent('{{configuration.name}}-mappings.json'))
            }
          }
        }
      {%- endfor %}
      ]
    }
  }
}
