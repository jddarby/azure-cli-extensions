// Copyright (c) Microsoft Corporation. All rights reserved.
// Highly Confidential Material
//
// The template that the NSD invokes to create the Network Function from a published NFDV. 

@description('Publisher where the NFD is published')
param publisherName string = '{{publisher_name}}'

@description('NFD Group name for the Network Function')
param networkFunctionDefinitionGroupName string = '{{network_function_definition_group_name}}'

@description('NFD version')
param {{network_function_definition_version_parameter}} string

@description('Offering location for the Network Function')
param networkFunctionDefinitionOfferingLocation string = '{{network_function_definition_offering_location}}'

@description('The managed identity that should be used to create the NF.')
param managedIdentity string

{%- if CNF %}
@description('The custom location of the ARC-enabled AKS cluster to create the NF.')
param customLocationId string
{%- endif %}

param location string = '{{location}}'

param nfviType string = '{{nfvi_type}}'

param resourceGroupId string = resourceGroup().id

param deploymentParameters array

var identityObject = (managedIdentity == '')  ? {
  type: 'SystemAssigned'
} : {
  type: 'UserAssigned'
  userAssignedIdentities: {
    '${managedIdentity}': {}
  }
}

// Create as many NFs as we have sets of configuration.
// In the CNF case we supply a unique releaseName and releaseNamespace, so that the NFs
// don't clash when they are deployed on the Kubernetes cluster.
resource nf_resource 'Microsoft.HybridNetwork/networkFunctions@2023-04-01-preview' = [for (values, i) in deploymentParameters: {
  name: '{{network_function_name}}${i}'
  location: location
  identity: identityObject
  properties: {
    publisherName: publisherName
    publisherScope: 'Private'
    networkFunctionDefinitionGroupName: networkFunctionDefinitionGroupName
    networkFunctionDefinitionVersion: {{network_function_definition_version_parameter}}
    networkFunctionDefinitionOfferingLocation: networkFunctionDefinitionOfferingLocation
    nfviType: nfviType
{%- if CNF %}
    nfviId: customLocationId
{%- else %}
    nfviId: resourceGroupId
{%- endif %}
    allowSoftwareUpdate: true
{%- if CNF %}
    deploymentValues: string(union(values, {AOSMNFIndex: '${i}'}))
{%- else %}
    deploymentValues: string(values)
{%- endif %}
  }
}]
